{"ast":null,"code":"export function genPoints(values, boundary) {\n  const {\n    minX,\n    maxX,\n    minY,\n    maxY\n  } = boundary;\n  const totalValues = values.length;\n  const maxValue = Math.max(...values);\n  const minValue = Math.min(...values);\n  const gridX = (maxX - minX) / (totalValues - 1);\n  const gridY = (maxY - minY) / (maxValue - minValue || 1);\n  return values.map((value, index) => {\n    return {\n      x: minX + index * gridX,\n      y: maxY - (value - minValue) * gridY,\n      value\n    };\n  });\n}\nexport function genBars(values, boundary) {\n  const {\n    minX,\n    maxX,\n    minY,\n    maxY\n  } = boundary;\n  const totalValues = values.length;\n  let maxValue = Math.max(...values);\n  let minValue = Math.min(...values);\n  if (minValue > 0) minValue = 0;\n  if (maxValue < 0) maxValue = 0;\n  const gridX = maxX / totalValues;\n  const gridY = (maxY - minY) / (maxValue - minValue || 1);\n  const horizonY = maxY - Math.abs(minValue * gridY);\n  return values.map((value, index) => {\n    const height = Math.abs(gridY * value);\n    return {\n      x: minX + index * gridX,\n      y: horizonY - height + +(value < 0) * height,\n      height,\n      value\n    };\n  });\n}","map":{"version":3,"mappings":"AAEA,OAAM,SAAUA,SAAV,CACJC,MADI,EAEJC,QAFI,EAEc;AAElB,QAAM;AAAEC,QAAF;AAAQC,QAAR;AAAcC,QAAd;AAAoBC;AAApB,MAA6BJ,QAAnC;AACA,QAAMK,WAAW,GAAGN,MAAM,CAACO,MAA3B;AACA,QAAMC,QAAQ,GAAGC,IAAI,CAACC,GAAL,CAAS,GAAGV,MAAZ,CAAjB;AACA,QAAMW,QAAQ,GAAGF,IAAI,CAACG,GAAL,CAAS,GAAGZ,MAAZ,CAAjB;AAEA,QAAMa,KAAK,GAAG,CAACV,IAAI,GAAGD,IAAR,KAAiBI,WAAW,GAAG,CAA/B,CAAd;AACA,QAAMQ,KAAK,GAAG,CAACT,IAAI,GAAGD,IAAR,KAAkBI,QAAQ,GAAGG,QAAX,IAAwB,CAA1C,CAAd;AAEA,SAAOX,MAAM,CAACe,GAAP,CAAW,CAACC,KAAD,EAAQC,KAAR,KAAiB;AACjC,WAAO;AACLC,OAAC,EAAEhB,IAAI,GAAGe,KAAK,GAAGJ,KADb;AAELM,OAAC,EAAEd,IAAI,GAAG,CAACW,KAAK,GAAGL,QAAT,IAAqBG,KAF1B;AAGLE;AAHK,KAAP;AADK,IAAP;AAOD;AAED,OAAM,SAAUI,OAAV,CACJpB,MADI,EAEJC,QAFI,EAEc;AAElB,QAAM;AAAEC,QAAF;AAAQC,QAAR;AAAcC,QAAd;AAAoBC;AAApB,MAA6BJ,QAAnC;AACA,QAAMK,WAAW,GAAGN,MAAM,CAACO,MAA3B;AACA,MAAIC,QAAQ,GAAGC,IAAI,CAACC,GAAL,CAAS,GAAGV,MAAZ,CAAf;AACA,MAAIW,QAAQ,GAAGF,IAAI,CAACG,GAAL,CAAS,GAAGZ,MAAZ,CAAf;AAEA,MAAIW,QAAQ,GAAG,CAAf,EAAkBA,QAAQ,GAAG,CAAX;AAClB,MAAIH,QAAQ,GAAG,CAAf,EAAkBA,QAAQ,GAAG,CAAX;AAElB,QAAMK,KAAK,GAAGV,IAAI,GAAGG,WAArB;AACA,QAAMQ,KAAK,GAAG,CAACT,IAAI,GAAGD,IAAR,KAAkBI,QAAQ,GAAGG,QAAX,IAAwB,CAA1C,CAAd;AACA,QAAMU,QAAQ,GAAGhB,IAAI,GAAGI,IAAI,CAACa,GAAL,CAASX,QAAQ,GAAGG,KAApB,CAAxB;AAEA,SAAOd,MAAM,CAACe,GAAP,CAAW,CAACC,KAAD,EAAQC,KAAR,KAAiB;AACjC,UAAMM,MAAM,GAAGd,IAAI,CAACa,GAAL,CAASR,KAAK,GAAGE,KAAjB,CAAf;AAEA,WAAO;AACLE,OAAC,EAAEhB,IAAI,GAAGe,KAAK,GAAGJ,KADb;AAELM,OAAC,EAAEE,QAAQ,GAAGE,MAAX,GACD,EAAEP,KAAK,GAAG,CAAV,IAAeO,MAHZ;AAILA,YAJK;AAKLP;AALK,KAAP;AAHK,IAAP;AAWD","names":["genPoints","values","boundary","minX","maxX","minY","maxY","totalValues","length","maxValue","Math","max","minValue","min","gridX","gridY","map","value","index","x","y","genBars","horizonY","abs","height"],"sourceRoot":"","sources":["../../../../src/components/VSparkline/helpers/core.ts"],"sourcesContent":["import { Point, Boundary, Bar } from '../VSparkline'\n\nexport function genPoints (\n  values: number[],\n  boundary: Boundary\n): Point[] {\n  const { minX, maxX, minY, maxY } = boundary\n  const totalValues = values.length\n  const maxValue = Math.max(...values)\n  const minValue = Math.min(...values)\n\n  const gridX = (maxX - minX) / (totalValues - 1)\n  const gridY = (maxY - minY) / ((maxValue - minValue) || 1)\n\n  return values.map((value, index) => {\n    return {\n      x: minX + index * gridX,\n      y: maxY - (value - minValue) * gridY,\n      value,\n    }\n  })\n}\n\nexport function genBars (\n  values: number[],\n  boundary: Boundary\n): Bar[] {\n  const { minX, maxX, minY, maxY } = boundary\n  const totalValues = values.length\n  let maxValue = Math.max(...values)\n  let minValue = Math.min(...values)\n\n  if (minValue > 0) minValue = 0\n  if (maxValue < 0) maxValue = 0\n\n  const gridX = maxX / totalValues\n  const gridY = (maxY - minY) / ((maxValue - minValue) || 1)\n  const horizonY = maxY - Math.abs(minValue * gridY)\n\n  return values.map((value, index) => {\n    const height = Math.abs(gridY * value)\n\n    return {\n      x: minX + index * gridX,\n      y: horizonY - height +\n        +(value < 0) * height,\n      height,\n      value,\n    }\n  })\n}\n"]},"metadata":{},"sourceType":"module"}