{"ast":null,"code":"import Vue from 'vue';\n/**\n * Delayable\n *\n * @mixin\n *\n * Changes the open or close delay time for elements\n */\n\nexport default Vue.extend().extend({\n  name: 'delayable',\n  props: {\n    openDelay: {\n      type: [Number, String],\n      default: 0\n    },\n    closeDelay: {\n      type: [Number, String],\n      default: 0\n    }\n  },\n  data: () => ({\n    openTimeout: undefined,\n    closeTimeout: undefined\n  }),\n  methods: {\n    /**\n     * Clear any pending delay timers from executing\n     */\n    clearDelay() {\n      clearTimeout(this.openTimeout);\n      clearTimeout(this.closeTimeout);\n    },\n\n    /**\n     * Runs callback after a specified delay\n     */\n    runDelay(type, cb) {\n      this.clearDelay();\n      const delay = parseInt(this[`${type}Delay`], 10);\n      this[`${type}Timeout`] = setTimeout(cb || (() => {\n        this.isActive = {\n          open: true,\n          close: false\n        }[type];\n      }), delay);\n    }\n\n  }\n});","map":{"version":3,"mappings":"AAAA,OAAOA,GAAP,MAAgB,KAAhB;AAEA;;;;;;AAMG;;AACH,eAAeA,GAAG,CAACC,MAAJ,GAA2CA,MAA3C,CAAkD;AAC/DC,MAAI,EAAE,WADyD;AAG/DC,OAAK,EAAE;AACLC,aAAS,EAAE;AACTC,UAAI,EAAE,CAACC,MAAD,EAASC,MAAT,CADG;AAETC,aAAO,EAAE;AAFA,KADN;AAKLC,cAAU,EAAE;AACVJ,UAAI,EAAE,CAACC,MAAD,EAASC,MAAT,CADI;AAEVC,aAAO,EAAE;AAFC;AALP,GAHwD;AAc/DE,MAAI,EAAE,OAAO;AACXC,eAAW,EAAEC,SADF;AAEXC,gBAAY,EAAED;AAFH,GAAP,CAdyD;AAmB/DE,SAAO,EAAE;AACP;;AAEG;AACHC,cAAU;AACRC,kBAAY,CAAC,KAAKL,WAAN,CAAZ;AACAK,kBAAY,CAAC,KAAKH,YAAN,CAAZ;AANK;;AAQP;;AAEG;AACHI,YAAQ,CAAEZ,IAAF,EAA0Ba,EAA1B,EAAyC;AAC/C,WAAKH,UAAL;AAEA,YAAMI,KAAK,GAAGC,QAAQ,CAAE,KAAa,GAAGf,IAAI,OAApB,CAAF,EAAgC,EAAhC,CAAtB;AAEE,WAAa,GAAGA,IAAI,SAApB,IAAiCgB,UAAU,CAACH,EAAE,KAAK,MAAK;AACxD,aAAKI,QAAL,GAAgB;AAAEC,cAAI,EAAE,IAAR;AAAcC,eAAK,EAAE;AAArB,UAA6BnB,IAA7B,CAAhB;AAD8C,QAAH,EAEzCc,KAFyC,CAA3C;AAGH;;AAnBM;AAnBsD,CAAlD,CAAf","names":["Vue","extend","name","props","openDelay","type","Number","String","default","closeDelay","data","openTimeout","undefined","closeTimeout","methods","clearDelay","clearTimeout","runDelay","cb","delay","parseInt","setTimeout","isActive","open","close"],"sourceRoot":"","sources":["../../../src/mixins/delayable/index.ts"],"sourcesContent":["import Vue from 'vue'\n\n/**\n * Delayable\n *\n * @mixin\n *\n * Changes the open or close delay time for elements\n */\nexport default Vue.extend<Vue & { isActive?: boolean }>().extend({\n  name: 'delayable',\n\n  props: {\n    openDelay: {\n      type: [Number, String],\n      default: 0,\n    },\n    closeDelay: {\n      type: [Number, String],\n      default: 0,\n    },\n  },\n\n  data: () => ({\n    openTimeout: undefined as number | undefined,\n    closeTimeout: undefined as number | undefined,\n  }),\n\n  methods: {\n    /**\n     * Clear any pending delay timers from executing\n     */\n    clearDelay (): void {\n      clearTimeout(this.openTimeout)\n      clearTimeout(this.closeTimeout)\n    },\n    /**\n     * Runs callback after a specified delay\n     */\n    runDelay (type: 'open' | 'close', cb?: () => void): void {\n      this.clearDelay()\n\n      const delay = parseInt((this as any)[`${type}Delay`], 10)\n\n      ;(this as any)[`${type}Timeout`] = setTimeout(cb || (() => {\n        this.isActive = { open: true, close: false }[type]\n      }), delay)\n    },\n  },\n})\n"]},"metadata":{},"sourceType":"module"}