{"ast":null,"code":"import _objectSpread from \"/Users/national/Documents/users/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _typeof from \"/Users/national/Documents/users/node_modules/@babel/runtime/helpers/esm/typeof.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.fill.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.slice.js\";\n// Mixins\nimport Colorable from '../../mixins/colorable'; // Utilities\n\nimport mixins from '../../util/mixins';\nimport { genPoints, genBars as _genBars } from './helpers/core';\nimport { genPath as _genPath } from './helpers/path';\nexport default mixins(Colorable).extend({\n  name: 'VSparkline',\n  inheritAttrs: false,\n  props: {\n    autoDraw: Boolean,\n    autoDrawDuration: {\n      type: Number,\n      default: 2000\n    },\n    autoDrawEasing: {\n      type: String,\n      default: 'ease'\n    },\n    autoLineWidth: {\n      type: Boolean,\n      default: false\n    },\n    color: {\n      type: String,\n      default: 'primary'\n    },\n    fill: {\n      type: Boolean,\n      default: false\n    },\n    gradient: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    gradientDirection: {\n      type: String,\n      validator: function validator(val) {\n        return ['top', 'bottom', 'left', 'right'].includes(val);\n      },\n      default: 'top'\n    },\n    height: {\n      type: [String, Number],\n      default: 75\n    },\n    labels: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    labelSize: {\n      type: [Number, String],\n      default: 7\n    },\n    lineWidth: {\n      type: [String, Number],\n      default: 4\n    },\n    padding: {\n      type: [String, Number],\n      default: 8\n    },\n    showLabels: Boolean,\n    smooth: {\n      type: [Boolean, Number, String],\n      default: false\n    },\n    type: {\n      type: String,\n      default: 'trend',\n      validator: function validator(val) {\n        return ['trend', 'bar'].includes(val);\n      }\n    },\n    value: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    width: {\n      type: [Number, String],\n      default: 300\n    }\n  },\n  data: function data() {\n    return {\n      lastLength: 0\n    };\n  },\n  computed: {\n    parsedPadding: function parsedPadding() {\n      return Number(this.padding);\n    },\n    parsedWidth: function parsedWidth() {\n      return Number(this.width);\n    },\n    parsedHeight: function parsedHeight() {\n      return parseInt(this.height, 10);\n    },\n    parsedLabelSize: function parsedLabelSize() {\n      return parseInt(this.labelSize, 10) || 7;\n    },\n    totalHeight: function totalHeight() {\n      var height = this.parsedHeight;\n      if (this.hasLabels) height += parseInt(this.labelSize, 10) * 1.5;\n      return height;\n    },\n    totalWidth: function totalWidth() {\n      var width = this.parsedWidth;\n      if (this.type === 'bar') width = Math.max(this.value.length * this._lineWidth, width);\n      return width;\n    },\n    totalValues: function totalValues() {\n      return this.value.length;\n    },\n    _lineWidth: function _lineWidth() {\n      if (this.autoLineWidth && this.type !== 'trend') {\n        var totalPadding = this.parsedPadding * (this.totalValues + 1);\n        return (this.parsedWidth - totalPadding) / this.totalValues;\n      } else {\n        return parseFloat(this.lineWidth) || 4;\n      }\n    },\n    boundary: function boundary() {\n      if (this.type === 'bar') return {\n        minX: 0,\n        maxX: this.totalWidth,\n        minY: 0,\n        maxY: this.parsedHeight\n      };\n      var padding = this.parsedPadding;\n      return {\n        minX: padding,\n        maxX: this.totalWidth - padding,\n        minY: padding,\n        maxY: this.parsedHeight - padding\n      };\n    },\n    hasLabels: function hasLabels() {\n      return Boolean(this.showLabels || this.labels.length > 0 || this.$scopedSlots.label);\n    },\n    parsedLabels: function parsedLabels() {\n      var labels = [];\n      var points = this._values;\n      var len = points.length;\n\n      for (var i = 0; labels.length < len; i++) {\n        var item = points[i];\n        var value = this.labels[i];\n\n        if (!value) {\n          value = _typeof(item) === 'object' ? item.value : item;\n        }\n\n        labels.push({\n          x: item.x,\n          value: String(value)\n        });\n      }\n\n      return labels;\n    },\n    normalizedValues: function normalizedValues() {\n      return this.value.map(function (item) {\n        return typeof item === 'number' ? item : item.value;\n      });\n    },\n    _values: function _values() {\n      return this.type === 'trend' ? genPoints(this.normalizedValues, this.boundary) : _genBars(this.normalizedValues, this.boundary);\n    },\n    textY: function textY() {\n      var y = this.parsedHeight;\n      if (this.type === 'trend') y -= 4;\n      return y;\n    },\n    _radius: function _radius() {\n      return this.smooth === true ? 8 : Number(this.smooth);\n    }\n  },\n  watch: {\n    value: {\n      immediate: true,\n      handler: function handler() {\n        var _this = this;\n\n        this.$nextTick(function () {\n          if (!_this.autoDraw || _this.type === 'bar' || !_this.$refs.path) return;\n          var path = _this.$refs.path;\n          var length = path.getTotalLength();\n\n          if (!_this.fill) {\n            path.style.transition = 'none';\n            path.style.strokeDasharray = length + ' ' + length;\n            path.style.strokeDashoffset = Math.abs(length - (_this.lastLength || 0)).toString();\n            path.getBoundingClientRect();\n            path.style.transition = \"stroke-dashoffset \".concat(_this.autoDrawDuration, \"ms \").concat(_this.autoDrawEasing);\n            path.style.strokeDashoffset = '0';\n          } else {\n            path.style.transformOrigin = 'bottom center';\n            path.style.transition = 'none';\n            path.style.transform = \"scaleY(0)\";\n            path.getBoundingClientRect();\n            path.style.transition = \"transform \".concat(_this.autoDrawDuration, \"ms \").concat(_this.autoDrawEasing);\n            path.style.transform = \"scaleY(1)\";\n          }\n\n          _this.lastLength = length;\n        });\n      }\n    }\n  },\n  methods: {\n    genGradient: function genGradient() {\n      var _this2 = this;\n\n      var gradientDirection = this.gradientDirection;\n      var gradient = this.gradient.slice(); // Pushes empty string to force\n      // a fallback to currentColor\n\n      if (!gradient.length) gradient.push('');\n      var len = Math.max(gradient.length - 1, 1);\n      var stops = gradient.reverse().map(function (color, index) {\n        return _this2.$createElement('stop', {\n          attrs: {\n            offset: index / len,\n            'stop-color': color || 'currentColor'\n          }\n        });\n      });\n      return this.$createElement('defs', [this.$createElement('linearGradient', {\n        attrs: {\n          id: this._uid,\n          gradientUnits: 'userSpaceOnUse',\n          x1: gradientDirection === 'left' ? '100%' : '0',\n          y1: gradientDirection === 'top' ? '100%' : '0',\n          x2: gradientDirection === 'right' ? '100%' : '0',\n          y2: gradientDirection === 'bottom' ? '100%' : '0'\n        }\n      }, stops)]);\n    },\n    genG: function genG(children) {\n      return this.$createElement('g', {\n        style: {\n          fontSize: '8',\n          textAnchor: 'middle',\n          dominantBaseline: 'mathematical',\n          fill: 'currentColor'\n        }\n      }, children);\n    },\n    genPath: function genPath() {\n      var points = genPoints(this.normalizedValues, this.boundary);\n      return this.$createElement('path', {\n        attrs: {\n          d: _genPath(points, this._radius, this.fill, this.parsedHeight),\n          fill: this.fill ? \"url(#\".concat(this._uid, \")\") : 'none',\n          stroke: this.fill ? 'none' : \"url(#\".concat(this._uid, \")\")\n        },\n        ref: 'path'\n      });\n    },\n    genLabels: function genLabels(offsetX) {\n      var _this3 = this;\n\n      var children = this.parsedLabels.map(function (item, i) {\n        return _this3.$createElement('text', {\n          attrs: {\n            x: item.x + offsetX + _this3._lineWidth / 2,\n            y: _this3.textY + _this3.parsedLabelSize * 0.75,\n            'font-size': Number(_this3.labelSize) || 7\n          }\n        }, [_this3.genLabel(item, i)]);\n      });\n      return this.genG(children);\n    },\n    genLabel: function genLabel(item, index) {\n      return this.$scopedSlots.label ? this.$scopedSlots.label({\n        index: index,\n        value: item.value\n      }) : item.value;\n    },\n    genBars: function genBars() {\n      if (!this.value || this.totalValues < 2) return undefined;\n\n      var bars = _genBars(this.normalizedValues, this.boundary);\n\n      var offsetX = (Math.abs(bars[0].x - bars[1].x) - this._lineWidth) / 2;\n      return this.$createElement('svg', {\n        attrs: {\n          display: 'block',\n          viewBox: \"0 0 \".concat(this.totalWidth, \" \").concat(this.totalHeight)\n        }\n      }, [this.genGradient(), this.genClipPath(bars, offsetX, this._lineWidth, 'sparkline-bar-' + this._uid), this.hasLabels ? this.genLabels(offsetX) : undefined, this.$createElement('g', {\n        attrs: {\n          'clip-path': \"url(#sparkline-bar-\".concat(this._uid, \"-clip)\"),\n          fill: \"url(#\".concat(this._uid, \")\")\n        }\n      }, [this.$createElement('rect', {\n        attrs: {\n          x: 0,\n          y: 0,\n          width: this.totalWidth,\n          height: this.height\n        }\n      })])]);\n    },\n    genClipPath: function genClipPath(bars, offsetX, lineWidth, id) {\n      var _this4 = this;\n\n      var rounding = typeof this.smooth === 'number' ? this.smooth : this.smooth ? 2 : 0;\n      return this.$createElement('clipPath', {\n        attrs: {\n          id: \"\".concat(id, \"-clip\")\n        }\n      }, bars.map(function (item) {\n        return _this4.$createElement('rect', {\n          attrs: {\n            x: item.x + offsetX,\n            y: item.y,\n            width: lineWidth,\n            height: item.height,\n            rx: rounding,\n            ry: rounding\n          }\n        }, [_this4.autoDraw ? _this4.$createElement('animate', {\n          attrs: {\n            attributeName: 'height',\n            from: 0,\n            to: item.height,\n            dur: \"\".concat(_this4.autoDrawDuration, \"ms\"),\n            fill: 'freeze'\n          }\n        }) : undefined]);\n      }));\n    },\n    genTrend: function genTrend() {\n      return this.$createElement('svg', this.setTextColor(this.color, {\n        attrs: _objectSpread(_objectSpread({}, this.$attrs), {}, {\n          display: 'block',\n          'stroke-width': this._lineWidth || 1,\n          viewBox: \"0 0 \".concat(this.width, \" \").concat(this.totalHeight)\n        })\n      }), [this.genGradient(), this.hasLabels && this.genLabels(-(this._lineWidth / 2)), this.genPath()]);\n    }\n  },\n  render: function render(h) {\n    if (this.totalValues < 2) return undefined;\n    return this.type === 'trend' ? this.genTrend() : this.genBars();\n  }\n});","map":{"version":3,"mappings":"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","names":["Colorable","mixins","genPoints","genBars","genPath","extend","name","inheritAttrs","props","autoDraw","Boolean","autoDrawDuration","type","Number","default","autoDrawEasing","String","autoLineWidth","color","fill","gradient","Array","gradientDirection","validator","includes","val","height","labels","labelSize","lineWidth","padding","showLabels","smooth","value","width","data","lastLength","computed","parsedPadding","parsedWidth","parsedHeight","parseInt","parsedLabelSize","totalHeight","hasLabels","totalWidth","Math","max","length","_lineWidth","totalValues","totalPadding","parseFloat","boundary","minX","maxX","minY","maxY","$scopedSlots","label","parsedLabels","points","_values","len","i","item","push","x","normalizedValues","map","textY","y","_radius","watch","immediate","handler","$nextTick","$refs","path","getTotalLength","style","transition","strokeDasharray","strokeDashoffset","abs","toString","getBoundingClientRect","transformOrigin","transform","methods","genGradient","slice","stops","reverse","index","$createElement","attrs","offset","id","_uid","gradientUnits","x1","y1","x2","y2","genG","children","fontSize","textAnchor","dominantBaseline","d","stroke","ref","genLabels","offsetX","genLabel","undefined","bars","display","viewBox","genClipPath","rounding","rx","ry","attributeName","from","to","dur","genTrend","setTextColor","$attrs","render","h"],"sourceRoot":"","sources":["../../../src/components/VSparkline/VSparkline.ts"],"sourcesContent":["// Mixins\nimport Colorable from '../../mixins/colorable'\n\n// Utilities\nimport mixins, { ExtractVue } from '../../util/mixins'\nimport { genPoints, genBars } from './helpers/core'\nimport { genPath } from './helpers/path'\n\n// Types\nimport Vue, { VNode } from 'vue'\nimport { Prop, PropValidator } from 'vue/types/options'\n\nexport type SparklineItem = number | { value: number }\n\nexport type SparklineText = {\n  x: number\n  value: string\n}\n\nexport interface Boundary {\n  minX: number\n  minY: number\n  maxX: number\n  maxY: number\n}\n\nexport interface Point {\n  x: number\n  y: number\n  value: number\n}\n\nexport interface Bar {\n  x: number\n  y: number\n  height: number\n  value: number\n}\n\ninterface options extends Vue {\n  $refs: {\n    path: SVGPathElement\n  }\n}\n\nexport default mixins<options &\n/* eslint-disable indent */\n  ExtractVue<[\n    typeof Colorable\n  ]>\n/* eslint-enable indent */\n>(\n  Colorable\n).extend({\n  name: 'VSparkline',\n\n  inheritAttrs: false,\n\n  props: {\n    autoDraw: Boolean,\n    autoDrawDuration: {\n      type: Number,\n      default: 2000,\n    },\n    autoDrawEasing: {\n      type: String,\n      default: 'ease',\n    },\n    autoLineWidth: {\n      type: Boolean,\n      default: false,\n    },\n    color: {\n      type: String,\n      default: 'primary',\n    },\n    fill: {\n      type: Boolean,\n      default: false,\n    },\n    gradient: {\n      type: Array,\n      default: () => ([]),\n    } as PropValidator<string[]>,\n    gradientDirection: {\n      type: String as Prop<'top' | 'bottom' | 'left' | 'right'>,\n      validator: (val: string) => ['top', 'bottom', 'left', 'right'].includes(val),\n      default: 'top',\n    },\n    height: {\n      type: [String, Number],\n      default: 75,\n    },\n    labels: {\n      type: Array,\n      default: () => ([]),\n    } as PropValidator<SparklineItem[]>,\n    labelSize: {\n      type: [Number, String],\n      default: 7,\n    },\n    lineWidth: {\n      type: [String, Number],\n      default: 4,\n    },\n    padding: {\n      type: [String, Number],\n      default: 8,\n    },\n    showLabels: Boolean,\n    smooth: {\n      type: [Boolean, Number, String],\n      default: false,\n    },\n    type: {\n      type: String as Prop<'trend' | 'bar'>,\n      default: 'trend',\n      validator: (val: string) => ['trend', 'bar'].includes(val),\n    },\n    value: {\n      type: Array,\n      default: () => ([]),\n    } as PropValidator<SparklineItem[]>,\n    width: {\n      type: [Number, String],\n      default: 300,\n    },\n  },\n\n  data: () => ({\n    lastLength: 0,\n  }),\n\n  computed: {\n    parsedPadding (): number {\n      return Number(this.padding)\n    },\n    parsedWidth (): number {\n      return Number(this.width)\n    },\n    parsedHeight (): number {\n      return parseInt(this.height, 10)\n    },\n    parsedLabelSize (): number {\n      return parseInt(this.labelSize, 10) || 7\n    },\n    totalHeight (): number {\n      let height = this.parsedHeight\n\n      if (this.hasLabels) height += parseInt(this.labelSize, 10) * 1.5\n\n      return height\n    },\n    totalWidth (): number {\n      let width = this.parsedWidth\n      if (this.type === 'bar') width = Math.max(this.value.length * this._lineWidth, width)\n\n      return width\n    },\n    totalValues (): number {\n      return this.value.length\n    },\n    _lineWidth (): number {\n      if (this.autoLineWidth && this.type !== 'trend') {\n        const totalPadding = this.parsedPadding * (this.totalValues + 1)\n        return (this.parsedWidth - totalPadding) / this.totalValues\n      } else {\n        return parseFloat(this.lineWidth) || 4\n      }\n    },\n    boundary (): Boundary {\n      if (this.type === 'bar') return { minX: 0, maxX: this.totalWidth, minY: 0, maxY: this.parsedHeight }\n\n      const padding = this.parsedPadding\n\n      return {\n        minX: padding,\n        maxX: this.totalWidth - padding,\n        minY: padding,\n        maxY: this.parsedHeight - padding,\n      }\n    },\n    hasLabels (): boolean {\n      return Boolean(\n        this.showLabels ||\n        this.labels.length > 0 ||\n        this.$scopedSlots.label\n      )\n    },\n    parsedLabels (): SparklineText[] {\n      const labels = []\n      const points = this._values\n      const len = points.length\n\n      for (let i = 0; labels.length < len; i++) {\n        const item = points[i]\n        let value = this.labels[i]\n\n        if (!value) {\n          value = typeof item === 'object'\n            ? item.value\n            : item\n        }\n\n        labels.push({\n          x: item.x,\n          value: String(value),\n        })\n      }\n\n      return labels\n    },\n    normalizedValues (): number[] {\n      return this.value.map(item => (typeof item === 'number' ? item : item.value))\n    },\n    _values (): Point[] | Bar[] {\n      return this.type === 'trend' ? genPoints(this.normalizedValues, this.boundary) : genBars(this.normalizedValues, this.boundary)\n    },\n    textY (): number {\n      let y = this.parsedHeight\n      if (this.type === 'trend') y -= 4\n      return y\n    },\n    _radius (): number {\n      return this.smooth === true ? 8 : Number(this.smooth)\n    },\n  },\n\n  watch: {\n    value: {\n      immediate: true,\n      handler () {\n        this.$nextTick(() => {\n          if (\n            !this.autoDraw ||\n            this.type === 'bar' ||\n            !this.$refs.path\n          ) return\n\n          const path = this.$refs.path\n          const length = path.getTotalLength()\n\n          if (!this.fill) {\n            path.style.transition = 'none'\n            path.style.strokeDasharray = length + ' ' + length\n            path.style.strokeDashoffset = Math.abs(length - (this.lastLength || 0)).toString()\n            path.getBoundingClientRect()\n            path.style.transition = `stroke-dashoffset ${this.autoDrawDuration}ms ${this.autoDrawEasing}`\n            path.style.strokeDashoffset = '0'\n          } else {\n            path.style.transformOrigin = 'bottom center'\n            path.style.transition = 'none'\n            path.style.transform = `scaleY(0)`\n            path.getBoundingClientRect()\n            path.style.transition = `transform ${this.autoDrawDuration}ms ${this.autoDrawEasing}`\n            path.style.transform = `scaleY(1)`\n          }\n          this.lastLength = length\n        })\n      },\n    },\n  },\n\n  methods: {\n    genGradient () {\n      const gradientDirection = this.gradientDirection\n      const gradient = this.gradient.slice()\n\n      // Pushes empty string to force\n      // a fallback to currentColor\n      if (!gradient.length) gradient.push('')\n\n      const len = Math.max(gradient.length - 1, 1)\n      const stops = gradient.reverse().map((color, index) =>\n        this.$createElement('stop', {\n          attrs: {\n            offset: index / len,\n            'stop-color': color || 'currentColor',\n          },\n        })\n      )\n\n      return this.$createElement('defs', [\n        this.$createElement('linearGradient', {\n          attrs: {\n            id: this._uid,\n            gradientUnits: 'userSpaceOnUse',\n            x1: gradientDirection === 'left' ? '100%' : '0',\n            y1: gradientDirection === 'top' ? '100%' : '0',\n            x2: gradientDirection === 'right' ? '100%' : '0',\n            y2: gradientDirection === 'bottom' ? '100%' : '0',\n          },\n        }, stops),\n      ])\n    },\n    genG (children: VNode[]) {\n      return this.$createElement('g', {\n        style: {\n          fontSize: '8',\n          textAnchor: 'middle',\n          dominantBaseline: 'mathematical',\n          fill: 'currentColor',\n        } as object, // TODO: TS 3.5 is too eager with the array type here\n      }, children)\n    },\n    genPath () {\n      const points = genPoints(this.normalizedValues, this.boundary)\n\n      return this.$createElement('path', {\n        attrs: {\n          d: genPath(points, this._radius, this.fill, this.parsedHeight),\n          fill: this.fill ? `url(#${this._uid})` : 'none',\n          stroke: this.fill ? 'none' : `url(#${this._uid})`,\n        },\n        ref: 'path',\n      })\n    },\n    genLabels (offsetX: number) {\n      const children = this.parsedLabels.map((item, i) => (\n        this.$createElement('text', {\n          attrs: {\n            x: item.x + offsetX + this._lineWidth / 2,\n            y: this.textY + (this.parsedLabelSize * 0.75),\n            'font-size': Number(this.labelSize) || 7,\n          },\n        }, [this.genLabel(item, i)])\n      ))\n\n      return this.genG(children)\n    },\n    genLabel (item: SparklineText, index: number) {\n      return this.$scopedSlots.label\n        ? this.$scopedSlots.label({ index, value: item.value })\n        : item.value\n    },\n    genBars () {\n      if (!this.value || this.totalValues < 2) return undefined as never\n\n      const bars = genBars(this.normalizedValues, this.boundary)\n      const offsetX = (Math.abs(bars[0].x - bars[1].x) - this._lineWidth) / 2\n\n      return this.$createElement('svg', {\n        attrs: {\n          display: 'block',\n          viewBox: `0 0 ${this.totalWidth} ${this.totalHeight}`,\n        },\n      }, [\n        this.genGradient(),\n        this.genClipPath(bars, offsetX, this._lineWidth, 'sparkline-bar-' + this._uid),\n        this.hasLabels ? this.genLabels(offsetX) : undefined as never,\n        this.$createElement('g', {\n          attrs: {\n            'clip-path': `url(#sparkline-bar-${this._uid}-clip)`,\n            fill: `url(#${this._uid})`,\n          },\n        }, [\n          this.$createElement('rect', {\n            attrs: {\n              x: 0,\n              y: 0,\n              width: this.totalWidth,\n              height: this.height,\n            },\n          }),\n        ]),\n      ])\n    },\n    genClipPath (bars: Bar[], offsetX: number, lineWidth: number, id: string) {\n      const rounding = typeof this.smooth === 'number'\n        ? this.smooth\n        : this.smooth ? 2 : 0\n\n      return this.$createElement('clipPath', {\n        attrs: {\n          id: `${id}-clip`,\n        },\n      }, bars.map(item => {\n        return this.$createElement('rect', {\n          attrs: {\n            x: item.x + offsetX,\n            y: item.y,\n            width: lineWidth,\n            height: item.height,\n            rx: rounding,\n            ry: rounding,\n          },\n        }, [\n          this.autoDraw ? this.$createElement('animate', {\n            attrs: {\n              attributeName: 'height',\n              from: 0,\n              to: item.height,\n              dur: `${this.autoDrawDuration}ms`,\n              fill: 'freeze',\n            },\n          }) : undefined as never,\n        ])\n      }))\n    },\n    genTrend () {\n      return this.$createElement('svg', this.setTextColor(this.color, {\n        attrs: {\n          ...this.$attrs,\n          display: 'block',\n          'stroke-width': this._lineWidth || 1,\n          viewBox: `0 0 ${this.width} ${this.totalHeight}`,\n        },\n      }), [\n        this.genGradient(),\n        this.hasLabels && this.genLabels(-(this._lineWidth / 2)),\n        this.genPath(),\n      ])\n    },\n  },\n\n  render (h): VNode {\n    if (this.totalValues < 2) return undefined as never\n\n    return this.type === 'trend' ? this.genTrend() : this.genBars()\n  },\n})\n"]},"metadata":{},"sourceType":"module"}