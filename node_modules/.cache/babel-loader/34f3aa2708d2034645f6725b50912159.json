{"ast":null,"code":"import _toConsumableArray from \"/Users/national/Documents/users/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport \"core-js/modules/es.array.map.js\";\nexport function genPoints(values, boundary) {\n  var minX = boundary.minX,\n      maxX = boundary.maxX,\n      minY = boundary.minY,\n      maxY = boundary.maxY;\n  var totalValues = values.length;\n  var maxValue = Math.max.apply(Math, _toConsumableArray(values));\n  var minValue = Math.min.apply(Math, _toConsumableArray(values));\n  var gridX = (maxX - minX) / (totalValues - 1);\n  var gridY = (maxY - minY) / (maxValue - minValue || 1);\n  return values.map(function (value, index) {\n    return {\n      x: minX + index * gridX,\n      y: maxY - (value - minValue) * gridY,\n      value: value\n    };\n  });\n}\nexport function genBars(values, boundary) {\n  var minX = boundary.minX,\n      maxX = boundary.maxX,\n      minY = boundary.minY,\n      maxY = boundary.maxY;\n  var totalValues = values.length;\n  var maxValue = Math.max.apply(Math, _toConsumableArray(values));\n  var minValue = Math.min.apply(Math, _toConsumableArray(values));\n  if (minValue > 0) minValue = 0;\n  if (maxValue < 0) maxValue = 0;\n  var gridX = maxX / totalValues;\n  var gridY = (maxY - minY) / (maxValue - minValue || 1);\n  var horizonY = maxY - Math.abs(minValue * gridY);\n  return values.map(function (value, index) {\n    var height = Math.abs(gridY * value);\n    return {\n      x: minX + index * gridX,\n      y: horizonY - height + +(value < 0) * height,\n      height: height,\n      value: value\n    };\n  });\n}","map":{"version":3,"mappings":";;AAEA,OAAM,SAAUA,SAAV,CACJC,MADI,EAEJC,QAFI,EAEc;AAElB,MAAQC,IAAR,GAAmCD,QAAnC,CAAQC,IAAR;AAAA,MAAcC,IAAd,GAAmCF,QAAnC,CAAcE,IAAd;AAAA,MAAoBC,IAApB,GAAmCH,QAAnC,CAAoBG,IAApB;AAAA,MAA0BC,IAA1B,GAAmCJ,QAAnC,CAA0BI,IAA1B;AACA,MAAMC,WAAW,GAAGN,MAAM,CAACO,MAA3B;AACA,MAAMC,QAAQ,GAAGC,IAAI,CAACC,GAAL,WAAI,qBAAQV,MAAR,EAArB;AACA,MAAMW,QAAQ,GAAGF,IAAI,CAACG,GAAL,WAAI,qBAAQZ,MAAR,EAArB;AAEA,MAAMa,KAAK,GAAG,CAACV,IAAI,GAAGD,IAAR,KAAiBI,WAAW,GAAG,CAA/B,CAAd;AACA,MAAMQ,KAAK,GAAG,CAACT,IAAI,GAAGD,IAAR,KAAkBI,QAAQ,GAAGG,QAAX,IAAwB,CAA1C,CAAd;AAEA,SAAOX,MAAM,CAACe,GAAP,CAAW,UAACC,KAAD,EAAQC,KAAR,EAAiB;AACjC,WAAO;AACLC,OAAC,EAAEhB,IAAI,GAAGe,KAAK,GAAGJ,KADb;AAELM,OAAC,EAAEd,IAAI,GAAG,CAACW,KAAK,GAAGL,QAAT,IAAqBG,KAF1B;AAGLE;AAHK,KAAP;AADK,IAAP;AAOD;AAED,OAAM,SAAUI,OAAV,CACJpB,MADI,EAEJC,QAFI,EAEc;AAElB,MAAQC,IAAR,GAAmCD,QAAnC,CAAQC,IAAR;AAAA,MAAcC,IAAd,GAAmCF,QAAnC,CAAcE,IAAd;AAAA,MAAoBC,IAApB,GAAmCH,QAAnC,CAAoBG,IAApB;AAAA,MAA0BC,IAA1B,GAAmCJ,QAAnC,CAA0BI,IAA1B;AACA,MAAMC,WAAW,GAAGN,MAAM,CAACO,MAA3B;AACA,MAAIC,QAAQ,GAAGC,IAAI,CAACC,GAAL,WAAI,qBAAQV,MAAR,EAAnB;AACA,MAAIW,QAAQ,GAAGF,IAAI,CAACG,GAAL,WAAI,qBAAQZ,MAAR,EAAnB;AAEA,MAAIW,QAAQ,GAAG,CAAf,EAAkBA,QAAQ,GAAG,CAAX;AAClB,MAAIH,QAAQ,GAAG,CAAf,EAAkBA,QAAQ,GAAG,CAAX;AAElB,MAAMK,KAAK,GAAGV,IAAI,GAAGG,WAArB;AACA,MAAMQ,KAAK,GAAG,CAACT,IAAI,GAAGD,IAAR,KAAkBI,QAAQ,GAAGG,QAAX,IAAwB,CAA1C,CAAd;AACA,MAAMU,QAAQ,GAAGhB,IAAI,GAAGI,IAAI,CAACa,GAAL,CAASX,QAAQ,GAAGG,KAApB,CAAxB;AAEA,SAAOd,MAAM,CAACe,GAAP,CAAW,UAACC,KAAD,EAAQC,KAAR,EAAiB;AACjC,QAAMM,MAAM,GAAGd,IAAI,CAACa,GAAL,CAASR,KAAK,GAAGE,KAAjB,CAAf;AAEA,WAAO;AACLE,OAAC,EAAEhB,IAAI,GAAGe,KAAK,GAAGJ,KADb;AAELM,OAAC,EAAEE,QAAQ,GAAGE,MAAX,GACD,EAAEP,KAAK,GAAG,CAAV,IAAeO,MAHZ;AAILA,YAJK,EAILA,MAJK;AAKLP;AALK,KAAP;AAHK,IAAP;AAWD","names":["genPoints","values","boundary","minX","maxX","minY","maxY","totalValues","length","maxValue","Math","max","minValue","min","gridX","gridY","map","value","index","x","y","genBars","horizonY","abs","height"],"sourceRoot":"","sources":["../../../../src/components/VSparkline/helpers/core.ts"],"sourcesContent":["import { Point, Boundary, Bar } from '../VSparkline'\n\nexport function genPoints (\n  values: number[],\n  boundary: Boundary\n): Point[] {\n  const { minX, maxX, minY, maxY } = boundary\n  const totalValues = values.length\n  const maxValue = Math.max(...values)\n  const minValue = Math.min(...values)\n\n  const gridX = (maxX - minX) / (totalValues - 1)\n  const gridY = (maxY - minY) / ((maxValue - minValue) || 1)\n\n  return values.map((value, index) => {\n    return {\n      x: minX + index * gridX,\n      y: maxY - (value - minValue) * gridY,\n      value,\n    }\n  })\n}\n\nexport function genBars (\n  values: number[],\n  boundary: Boundary\n): Bar[] {\n  const { minX, maxX, minY, maxY } = boundary\n  const totalValues = values.length\n  let maxValue = Math.max(...values)\n  let minValue = Math.min(...values)\n\n  if (minValue > 0) minValue = 0\n  if (maxValue < 0) maxValue = 0\n\n  const gridX = maxX / totalValues\n  const gridY = (maxY - minY) / ((maxValue - minValue) || 1)\n  const horizonY = maxY - Math.abs(minValue * gridY)\n\n  return values.map((value, index) => {\n    const height = Math.abs(gridY * value)\n\n    return {\n      x: minX + index * gridX,\n      y: horizonY - height +\n        +(value < 0) * height,\n      height,\n      value,\n    }\n  })\n}\n"]},"metadata":{},"sourceType":"module"}