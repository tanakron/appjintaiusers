{"ast":null,"code":"import mixins from '../../util/mixins';\n\nfunction searchChildren(children) {\n  const results = [];\n\n  for (let index = 0; index < children.length; index++) {\n    const child = children[index];\n\n    if (child.isActive && child.isDependent) {\n      results.push(child);\n    } else {\n      results.push(...searchChildren(child.$children));\n    }\n  }\n\n  return results;\n}\n/* @vue/component */\n\n\nexport default mixins().extend({\n  name: 'dependent',\n\n  data() {\n    return {\n      closeDependents: true,\n      isActive: false,\n      isDependent: true\n    };\n  },\n\n  watch: {\n    isActive(val) {\n      if (val) return;\n      const openDependents = this.getOpenDependents();\n\n      for (let index = 0; index < openDependents.length; index++) {\n        openDependents[index].isActive = false;\n      }\n    }\n\n  },\n  methods: {\n    getOpenDependents() {\n      if (this.closeDependents) return searchChildren(this.$children);\n      return [];\n    },\n\n    getOpenDependentElements() {\n      const result = [];\n      const openDependents = this.getOpenDependents();\n\n      for (let index = 0; index < openDependents.length; index++) {\n        result.push(...openDependents[index].getClickableDependentElements());\n      }\n\n      return result;\n    },\n\n    getClickableDependentElements() {\n      const result = [this.$el];\n      if (this.$refs.content) result.push(this.$refs.content);\n      if (this.overlay) result.push(this.overlay.$el);\n      result.push(...this.getOpenDependentElements());\n      return result;\n    }\n\n  }\n});","map":{"version":3,"mappings":"AAEA,OAAOA,MAAP,MAAmB,mBAAnB;;AAgBA,SAASC,cAAT,CAAyBC,QAAzB,EAAwC;AACtC,QAAMC,OAAO,GAAG,EAAhB;;AACA,OAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGF,QAAQ,CAACG,MAArC,EAA6CD,KAAK,EAAlD,EAAsD;AACpD,UAAME,KAAK,GAAGJ,QAAQ,CAACE,KAAD,CAAtB;;AACA,QAAIE,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACE,WAA5B,EAAyC;AACvCL,aAAO,CAACM,IAAR,CAAaH,KAAb;AADF,WAEO;AACLH,aAAO,CAACM,IAAR,CAAa,GAAGR,cAAc,CAACK,KAAK,CAACI,SAAP,CAA9B;AACD;AACF;;AAED,SAAOP,OAAP;AACD;AAED;;;AACA,eAAeH,MAAM,GAAYW,MAAlB,CAAyB;AACtCC,MAAI,EAAE,WADgC;;AAGtCC,MAAI;AACF,WAAO;AACLC,qBAAe,EAAE,IADZ;AAELP,cAAQ,EAAE,KAFL;AAGLC,iBAAW,EAAE;AAHR,KAAP;AAJoC;;AAWtCO,OAAK,EAAE;AACLR,YAAQ,CAAES,GAAF,EAAK;AACX,UAAIA,GAAJ,EAAS;AAET,YAAMC,cAAc,GAAG,KAAKC,iBAAL,EAAvB;;AACA,WAAK,IAAId,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGa,cAAc,CAACZ,MAA3C,EAAmDD,KAAK,EAAxD,EAA4D;AAC1Da,sBAAc,CAACb,KAAD,CAAd,CAAsBG,QAAtB,GAAiC,KAAjC;AACD;AACF;;AARI,GAX+B;AAsBtCY,SAAO,EAAE;AACPD,qBAAiB;AACf,UAAI,KAAKJ,eAAT,EAA0B,OAAOb,cAAc,CAAC,KAAKS,SAAN,CAArB;AAE1B,aAAO,EAAP;AAJK;;AAMPU,4BAAwB;AACtB,YAAMC,MAAM,GAAG,EAAf;AACA,YAAMJ,cAAc,GAAG,KAAKC,iBAAL,EAAvB;;AAEA,WAAK,IAAId,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGa,cAAc,CAACZ,MAA3C,EAAmDD,KAAK,EAAxD,EAA4D;AAC1DiB,cAAM,CAACZ,IAAP,CAAY,GAAGQ,cAAc,CAACb,KAAD,CAAd,CAAsBkB,6BAAtB,EAAf;AACD;;AAED,aAAOD,MAAP;AAdK;;AAgBPC,iCAA6B;AAC3B,YAAMD,MAAM,GAAG,CAAC,KAAKE,GAAN,CAAf;AACA,UAAI,KAAKC,KAAL,CAAWC,OAAf,EAAwBJ,MAAM,CAACZ,IAAP,CAAY,KAAKe,KAAL,CAAWC,OAAvB;AACxB,UAAI,KAAKC,OAAT,EAAkBL,MAAM,CAACZ,IAAP,CAAY,KAAKiB,OAAL,CAAaH,GAAzB;AAClBF,YAAM,CAACZ,IAAP,CAAY,GAAG,KAAKW,wBAAL,EAAf;AAEA,aAAOC,MAAP;AACD;;AAvBM;AAtB6B,CAAzB,CAAf","names":["mixins","searchChildren","children","results","index","length","child","isActive","isDependent","push","$children","extend","name","data","closeDependents","watch","val","openDependents","getOpenDependents","methods","getOpenDependentElements","result","getClickableDependentElements","$el","$refs","content","overlay"],"sourceRoot":"","sources":["../../../src/mixins/dependent/index.ts"],"sourcesContent":["import Vue from 'vue'\n\nimport mixins from '../../util/mixins'\nimport { VOverlay } from '../../components/VOverlay'\n\ninterface options extends Vue {\n  $el: HTMLElement\n  $refs: {\n    content: HTMLElement\n  }\n  overlay?: InstanceType<typeof VOverlay>\n}\n\ninterface DependentInstance extends Vue {\n  isActive?: boolean\n  isDependent?: boolean\n}\n\nfunction searchChildren (children: Vue[]): DependentInstance[] {\n  const results = []\n  for (let index = 0; index < children.length; index++) {\n    const child = children[index] as DependentInstance\n    if (child.isActive && child.isDependent) {\n      results.push(child)\n    } else {\n      results.push(...searchChildren(child.$children))\n    }\n  }\n\n  return results\n}\n\n/* @vue/component */\nexport default mixins<options>().extend({\n  name: 'dependent',\n\n  data () {\n    return {\n      closeDependents: true,\n      isActive: false,\n      isDependent: true,\n    }\n  },\n\n  watch: {\n    isActive (val) {\n      if (val) return\n\n      const openDependents = this.getOpenDependents()\n      for (let index = 0; index < openDependents.length; index++) {\n        openDependents[index].isActive = false\n      }\n    },\n  },\n\n  methods: {\n    getOpenDependents (): any[] {\n      if (this.closeDependents) return searchChildren(this.$children)\n\n      return []\n    },\n    getOpenDependentElements (): HTMLElement[] {\n      const result = []\n      const openDependents = this.getOpenDependents()\n\n      for (let index = 0; index < openDependents.length; index++) {\n        result.push(...openDependents[index].getClickableDependentElements())\n      }\n\n      return result\n    },\n    getClickableDependentElements (): HTMLElement[] {\n      const result = [this.$el]\n      if (this.$refs.content) result.push(this.$refs.content)\n      if (this.overlay) result.push(this.overlay.$el as HTMLElement)\n      result.push(...this.getOpenDependentElements())\n\n      return result\n    },\n  },\n})\n"]},"metadata":{},"sourceType":"module"}