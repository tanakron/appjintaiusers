{"ast":null,"code":"// Styles\nimport \"../../../src/components/VItemGroup/VItemGroup.sass\"; // Mixins\n\nimport Comparable from '../../mixins/comparable';\nimport Proxyable from '../../mixins/proxyable';\nimport Themeable from '../../mixins/themeable'; // Utilities\n\nimport mixins from '../../util/mixins';\nimport { consoleWarn } from '../../util/console';\nexport const BaseItemGroup = mixins(Comparable, Proxyable, Themeable).extend({\n  name: 'base-item-group',\n  props: {\n    activeClass: {\n      type: String,\n      default: 'v-item--active'\n    },\n    mandatory: Boolean,\n    max: {\n      type: [Number, String],\n      default: null\n    },\n    multiple: Boolean,\n    tag: {\n      type: String,\n      default: 'div'\n    }\n  },\n\n  data() {\n    return {\n      // As long as a value is defined, show it\n      // Otherwise, check if multiple\n      // to determine which default to provide\n      internalLazyValue: this.value !== undefined ? this.value : this.multiple ? [] : undefined,\n      items: []\n    };\n  },\n\n  computed: {\n    classes() {\n      return {\n        'v-item-group': true,\n        ...this.themeClasses\n      };\n    },\n\n    selectedIndex() {\n      return this.selectedItem && this.items.indexOf(this.selectedItem) || -1;\n    },\n\n    selectedItem() {\n      if (this.multiple) return undefined;\n      return this.selectedItems[0];\n    },\n\n    selectedItems() {\n      return this.items.filter((item, index) => {\n        return this.toggleMethod(this.getValue(item, index));\n      });\n    },\n\n    selectedValues() {\n      if (this.internalValue == null) return [];\n      return Array.isArray(this.internalValue) ? this.internalValue : [this.internalValue];\n    },\n\n    toggleMethod() {\n      if (!this.multiple) {\n        return v => this.valueComparator(this.internalValue, v);\n      }\n\n      const internalValue = this.internalValue;\n\n      if (Array.isArray(internalValue)) {\n        return v => internalValue.some(intern => this.valueComparator(intern, v));\n      }\n\n      return () => false;\n    }\n\n  },\n  watch: {\n    internalValue: 'updateItemsState',\n    items: 'updateItemsState'\n  },\n\n  created() {\n    if (this.multiple && !Array.isArray(this.internalValue)) {\n      consoleWarn('Model must be bound to an array if the multiple property is true.', this);\n    }\n  },\n\n  methods: {\n    genData() {\n      return {\n        class: this.classes\n      };\n    },\n\n    getValue(item, i) {\n      return item.value === undefined ? i : item.value;\n    },\n\n    onClick(item) {\n      this.updateInternalValue(this.getValue(item, this.items.indexOf(item)));\n    },\n\n    register(item) {\n      const index = this.items.push(item) - 1;\n      item.$on('change', () => this.onClick(item)); // If no value provided and mandatory,\n      // assign first registered item\n\n      if (this.mandatory && !this.selectedValues.length) {\n        this.updateMandatory();\n      }\n\n      this.updateItem(item, index);\n    },\n\n    unregister(item) {\n      if (this._isDestroyed) return;\n      const index = this.items.indexOf(item);\n      const value = this.getValue(item, index);\n      this.items.splice(index, 1);\n      const valueIndex = this.selectedValues.indexOf(value); // Items is not selected, do nothing\n\n      if (valueIndex < 0) return; // If not mandatory, use regular update process\n\n      if (!this.mandatory) {\n        return this.updateInternalValue(value);\n      } // Remove the value\n\n\n      if (this.multiple && Array.isArray(this.internalValue)) {\n        this.internalValue = this.internalValue.filter(v => v !== value);\n      } else {\n        this.internalValue = undefined;\n      } // If mandatory and we have no selection\n      // add the last item as value\n\n      /* istanbul ignore else */\n\n\n      if (!this.selectedItems.length) {\n        this.updateMandatory(true);\n      }\n    },\n\n    updateItem(item, index) {\n      const value = this.getValue(item, index);\n      item.isActive = this.toggleMethod(value);\n    },\n\n    // https://github.com/vuetifyjs/vuetify/issues/5352\n    updateItemsState() {\n      this.$nextTick(() => {\n        if (this.mandatory && !this.selectedItems.length) {\n          return this.updateMandatory();\n        } // TODO: Make this smarter so it\n        // doesn't have to iterate every\n        // child in an update\n\n\n        this.items.forEach(this.updateItem);\n      });\n    },\n\n    updateInternalValue(value) {\n      this.multiple ? this.updateMultiple(value) : this.updateSingle(value);\n    },\n\n    updateMandatory(last) {\n      if (!this.items.length) return;\n      const items = this.items.slice();\n      if (last) items.reverse();\n      const item = items.find(item => !item.disabled); // If no tabs are available\n      // aborts mandatory value\n\n      if (!item) return;\n      const index = this.items.indexOf(item);\n      this.updateInternalValue(this.getValue(item, index));\n    },\n\n    updateMultiple(value) {\n      const defaultValue = Array.isArray(this.internalValue) ? this.internalValue : [];\n      const internalValue = defaultValue.slice();\n      const index = internalValue.findIndex(val => val === value);\n      if (this.mandatory && // Item already exists\n      index > -1 && // value would be reduced below min\n      internalValue.length - 1 < 1) return;\n      if ( // Max is set\n      this.max != null && // Item doesn't exist\n      index < 0 && // value would be increased above max\n      internalValue.length + 1 > this.max) return;\n      index > -1 ? internalValue.splice(index, 1) : internalValue.push(value);\n      this.internalValue = internalValue;\n    },\n\n    updateSingle(value) {\n      const isSame = value === this.internalValue;\n      if (this.mandatory && isSame) return;\n      this.internalValue = isSame ? undefined : value;\n    }\n\n  },\n\n  render(h) {\n    return h(this.tag, this.genData(), this.$slots.default);\n  }\n\n});\nexport default BaseItemGroup.extend({\n  name: 'v-item-group',\n\n  provide() {\n    return {\n      itemGroup: this\n    };\n  }\n\n});","map":{"version":3,"mappings":"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","names":["Comparable","Proxyable","Themeable","mixins","consoleWarn","BaseItemGroup","extend","name","props","activeClass","type","String","default","mandatory","Boolean","max","Number","multiple","tag","data","internalLazyValue","value","undefined","items","computed","classes","themeClasses","selectedIndex","selectedItem","indexOf","selectedItems","filter","item","index","toggleMethod","getValue","selectedValues","internalValue","Array","isArray","v","valueComparator","some","intern","watch","created","methods","genData","class","i","onClick","updateInternalValue","register","push","$on","length","updateMandatory","updateItem","unregister","_isDestroyed","splice","valueIndex","isActive","updateItemsState","$nextTick","forEach","updateMultiple","updateSingle","last","slice","reverse","find","disabled","defaultValue","findIndex","val","isSame","render","h","$slots","provide","itemGroup"],"sourceRoot":"","sources":["../../../src/components/VItemGroup/VItemGroup.ts"],"sourcesContent":["// Styles\nimport './VItemGroup.sass'\n\n// Mixins\nimport Comparable from '../../mixins/comparable'\nimport Groupable from '../../mixins/groupable'\nimport Proxyable from '../../mixins/proxyable'\nimport Themeable from '../../mixins/themeable'\n\n// Utilities\nimport mixins from '../../util/mixins'\nimport { consoleWarn } from '../../util/console'\n\n// Types\nimport { VNode } from 'vue/types'\n\nexport type GroupableInstance = InstanceType<typeof Groupable> & {\n  id?: string\n  to?: any\n  value?: any\n }\n\nexport const BaseItemGroup = mixins(\n  Comparable,\n  Proxyable,\n  Themeable\n).extend({\n  name: 'base-item-group',\n\n  props: {\n    activeClass: {\n      type: String,\n      default: 'v-item--active',\n    },\n    mandatory: Boolean,\n    max: {\n      type: [Number, String],\n      default: null,\n    },\n    multiple: Boolean,\n    tag: {\n      type: String,\n      default: 'div',\n    },\n  },\n\n  data () {\n    return {\n      // As long as a value is defined, show it\n      // Otherwise, check if multiple\n      // to determine which default to provide\n      internalLazyValue: this.value !== undefined\n        ? this.value\n        : this.multiple ? [] : undefined,\n      items: [] as GroupableInstance[],\n    }\n  },\n\n  computed: {\n    classes (): Record<string, boolean> {\n      return {\n        'v-item-group': true,\n        ...this.themeClasses,\n      }\n    },\n    selectedIndex (): number {\n      return (this.selectedItem && this.items.indexOf(this.selectedItem)) || -1\n    },\n    selectedItem (): GroupableInstance | undefined {\n      if (this.multiple) return undefined\n\n      return this.selectedItems[0]\n    },\n    selectedItems (): GroupableInstance[] {\n      return this.items.filter((item, index) => {\n        return this.toggleMethod(this.getValue(item, index))\n      })\n    },\n    selectedValues (): any[] {\n      if (this.internalValue == null) return []\n\n      return Array.isArray(this.internalValue)\n        ? this.internalValue\n        : [this.internalValue]\n    },\n    toggleMethod (): (v: any) => boolean {\n      if (!this.multiple) {\n        return (v: any) => this.valueComparator(this.internalValue, v)\n      }\n\n      const internalValue = this.internalValue\n      if (Array.isArray(internalValue)) {\n        return (v: any) => internalValue.some(intern => this.valueComparator(intern, v))\n      }\n\n      return () => false\n    },\n  },\n\n  watch: {\n    internalValue: 'updateItemsState',\n    items: 'updateItemsState',\n  },\n\n  created () {\n    if (this.multiple && !Array.isArray(this.internalValue)) {\n      consoleWarn('Model must be bound to an array if the multiple property is true.', this)\n    }\n  },\n\n  methods: {\n\n    genData (): object {\n      return {\n        class: this.classes,\n      }\n    },\n    getValue (item: GroupableInstance, i: number): unknown {\n      return item.value === undefined\n        ? i\n        : item.value\n    },\n    onClick (item: GroupableInstance) {\n      this.updateInternalValue(\n        this.getValue(item, this.items.indexOf(item))\n      )\n    },\n    register (item: GroupableInstance) {\n      const index = this.items.push(item) - 1\n\n      item.$on('change', () => this.onClick(item))\n\n      // If no value provided and mandatory,\n      // assign first registered item\n      if (this.mandatory && !this.selectedValues.length) {\n        this.updateMandatory()\n      }\n\n      this.updateItem(item, index)\n    },\n    unregister (item: GroupableInstance) {\n      if (this._isDestroyed) return\n\n      const index = this.items.indexOf(item)\n      const value = this.getValue(item, index)\n\n      this.items.splice(index, 1)\n\n      const valueIndex = this.selectedValues.indexOf(value)\n\n      // Items is not selected, do nothing\n      if (valueIndex < 0) return\n\n      // If not mandatory, use regular update process\n      if (!this.mandatory) {\n        return this.updateInternalValue(value)\n      }\n\n      // Remove the value\n      if (this.multiple && Array.isArray(this.internalValue)) {\n        this.internalValue = this.internalValue.filter(v => v !== value)\n      } else {\n        this.internalValue = undefined\n      }\n\n      // If mandatory and we have no selection\n      // add the last item as value\n      /* istanbul ignore else */\n      if (!this.selectedItems.length) {\n        this.updateMandatory(true)\n      }\n    },\n    updateItem (item: GroupableInstance, index: number) {\n      const value = this.getValue(item, index)\n\n      item.isActive = this.toggleMethod(value)\n    },\n    // https://github.com/vuetifyjs/vuetify/issues/5352\n    updateItemsState () {\n      this.$nextTick(() => {\n        if (this.mandatory &&\n          !this.selectedItems.length\n        ) {\n          return this.updateMandatory()\n        }\n\n        // TODO: Make this smarter so it\n        // doesn't have to iterate every\n        // child in an update\n        this.items.forEach(this.updateItem)\n      })\n    },\n    updateInternalValue (value: any) {\n      this.multiple\n        ? this.updateMultiple(value)\n        : this.updateSingle(value)\n    },\n    updateMandatory (last?: boolean) {\n      if (!this.items.length) return\n\n      const items = this.items.slice()\n\n      if (last) items.reverse()\n\n      const item = items.find(item => !item.disabled)\n\n      // If no tabs are available\n      // aborts mandatory value\n      if (!item) return\n\n      const index = this.items.indexOf(item)\n\n      this.updateInternalValue(\n        this.getValue(item, index)\n      )\n    },\n    updateMultiple (value: any) {\n      const defaultValue = Array.isArray(this.internalValue)\n        ? this.internalValue\n        : []\n      const internalValue = defaultValue.slice()\n      const index = internalValue.findIndex(val => val === value)\n\n      if (\n        this.mandatory &&\n        // Item already exists\n        index > -1 &&\n        // value would be reduced below min\n        internalValue.length - 1 < 1\n      ) return\n\n      if (\n        // Max is set\n        this.max != null &&\n        // Item doesn't exist\n        index < 0 &&\n        // value would be increased above max\n        internalValue.length + 1 > this.max\n      ) return\n\n      index > -1\n        ? internalValue.splice(index, 1)\n        : internalValue.push(value)\n\n      this.internalValue = internalValue\n    },\n    updateSingle (value: any) {\n      const isSame = value === this.internalValue\n\n      if (this.mandatory && isSame) return\n\n      this.internalValue = isSame ? undefined : value\n    },\n  },\n\n  render (h): VNode {\n    return h(this.tag, this.genData(), this.$slots.default)\n  },\n})\n\nexport default BaseItemGroup.extend({\n  name: 'v-item-group',\n\n  provide (): object {\n    return {\n      itemGroup: this,\n    }\n  },\n})\n"]},"metadata":{},"sourceType":"module"}