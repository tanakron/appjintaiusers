{"ast":null,"code":"// Types\nimport Vue from 'vue'; // Utils\n\nimport { getObjectValueByPath, wrapInArray } from '../../util/helpers';\n\nfunction needsTd(slot) {\n  var _slot$;\n\n  return slot.length !== 1 || !['td', 'th'].includes((_slot$ = slot[0]) == null ? void 0 : _slot$.tag);\n}\n\nexport default Vue.extend({\n  name: 'row',\n  functional: true,\n  props: {\n    headers: Array,\n    index: Number,\n    item: Object,\n    rtl: Boolean\n  },\n\n  render(h, {\n    props,\n    slots,\n    data\n  }) {\n    const computedSlots = slots();\n    const columns = props.headers.map(header => {\n      const children = [];\n      const value = getObjectValueByPath(props.item, header.value);\n      const slotName = header.value;\n      const scopedSlot = data.scopedSlots && data.scopedSlots.hasOwnProperty(slotName) && data.scopedSlots[slotName];\n      const regularSlot = computedSlots.hasOwnProperty(slotName) && computedSlots[slotName];\n\n      if (scopedSlot) {\n        children.push(...wrapInArray(scopedSlot({\n          item: props.item,\n          isMobile: false,\n          header,\n          index: props.index,\n          value\n        })));\n      } else if (regularSlot) {\n        children.push(...wrapInArray(regularSlot));\n      } else {\n        children.push(value == null ? value : String(value));\n      }\n\n      const textAlign = `text-${header.align || 'start'}`;\n      return needsTd(children) ? h('td', {\n        class: [textAlign, header.cellClass, {\n          'v-data-table__divider': header.divider\n        }]\n      }, children) : children;\n    });\n    return h('tr', data, columns);\n  }\n\n});","map":{"version":3,"mappings":"AAAA;AACA,OAAOA,GAAP,MAAqC,KAArC,C,CAGA;;AACA,SAASC,oBAAT,EAA+BC,WAA/B,QAAkD,oBAAlD;;AAEA,SAASC,OAAT,CAAkBC,IAAlB,EAA2C;AAAA;;AACzC,SAAOA,IAAK,CAACC,MAAN,KAAiB,CAAjB,IACL,CAAC,CAAC,IAAD,EAAO,IAAP,EAAaC,QAAb,WAAsBF,IAAK,CAAC,CAAD,CAA3B,qBAAsBG,OAAUC,GAAhC,CADH;AAED;;AAED,eAAeR,GAAG,CAACS,MAAJ,CAAW;AACxBC,MAAI,EAAE,KADkB;AAGxBC,YAAU,EAAE,IAHY;AAKxBC,OAAK,EAAE;AACLC,WAAO,EAAEC,KADJ;AAELC,SAAK,EAAEC,MAFF;AAGLC,QAAI,EAAEC,MAHD;AAILC,OAAG,EAAEC;AAJA,GALiB;;AAYxBC,QAAM,CAAEC,CAAF,EAAK;AAAEV,SAAF;AAASW,SAAT;AAAgBC;AAAhB,GAAL,EAA2B;AAC/B,UAAMC,aAAa,GAAGF,KAAK,EAA3B;AAEA,UAAMG,OAAO,GAAGd,KAAK,CAACC,OAAN,CAAcc,GAAd,CAAmBC,MAAD,IAA4B;AAC5D,YAAMC,QAAQ,GAAG,EAAjB;AACA,YAAMC,KAAK,GAAG7B,oBAAoB,CAACW,KAAK,CAACK,IAAP,EAAaW,MAAM,CAACE,KAApB,CAAlC;AAEA,YAAMC,QAAQ,GAAGH,MAAM,CAACE,KAAxB;AACA,YAAME,UAAU,GAAGR,IAAI,CAACS,WAAL,IAAoBT,IAAI,CAACS,WAAL,CAAiBC,cAAjB,CAAgCH,QAAhC,CAApB,IAAiEP,IAAI,CAACS,WAAL,CAAiBF,QAAjB,CAApF;AACA,YAAMI,WAAW,GAAGV,aAAa,CAACS,cAAd,CAA6BH,QAA7B,KAA0CN,aAAa,CAACM,QAAD,CAA3E;;AAEA,UAAIC,UAAJ,EAAgB;AACdH,gBAAQ,CAACO,IAAT,CAAc,GAAGlC,WAAW,CAAC8B,UAAU,CAAC;AACtCf,cAAI,EAAEL,KAAK,CAACK,IAD0B;AAEtCoB,kBAAQ,EAAE,KAF4B;AAGtCT,gBAHsC;AAItCb,eAAK,EAAEH,KAAK,CAACG,KAJyB;AAKtCe;AALsC,SAAD,CAAX,CAA5B;AADF,aAQO,IAAIK,WAAJ,EAAiB;AACtBN,gBAAQ,CAACO,IAAT,CAAc,GAAGlC,WAAW,CAACiC,WAAD,CAA5B;AADK,aAEA;AACLN,gBAAQ,CAACO,IAAT,CAAcN,KAAK,IAAI,IAAT,GAAgBA,KAAhB,GAAwBQ,MAAM,CAACR,KAAD,CAA5C;AACD;;AAED,YAAMS,SAAS,GAAG,QAAQX,MAAM,CAACY,KAAP,IAAgB,OAAO,EAAjD;AAEA,aAAOrC,OAAO,CAAC0B,QAAD,CAAP,GACHP,CAAC,CAAC,IAAD,EAAO;AACRmB,aAAK,EAAE,CACLF,SADK,EAELX,MAAM,CAACc,SAFF,EAGL;AACE,mCAAyBd,MAAM,CAACe;AADlC,SAHK;AADC,OAAP,EAQAd,QARA,CADE,GAUHA,QAVJ;AAxBc,MAAhB;AAqCA,WAAOP,CAAC,CAAC,IAAD,EAAOE,IAAP,EAAaE,OAAb,CAAR;AACD;;AArDuB,CAAX,CAAf","names":["Vue","getObjectValueByPath","wrapInArray","needsTd","slot","length","includes","_slot$","tag","extend","name","functional","props","headers","Array","index","Number","item","Object","rtl","Boolean","render","h","slots","data","computedSlots","columns","map","header","children","value","slotName","scopedSlot","scopedSlots","hasOwnProperty","regularSlot","push","isMobile","String","textAlign","align","class","cellClass","divider"],"sourceRoot":"","sources":["../../../src/components/VDataTable/Row.ts"],"sourcesContent":["// Types\nimport Vue, { VNode, PropType } from 'vue'\nimport { DataTableHeader } from 'vuetify/types'\n\n// Utils\nimport { getObjectValueByPath, wrapInArray } from '../../util/helpers'\n\nfunction needsTd (slot: VNode[] | undefined) {\n  return slot!.length !== 1 ||\n    !['td', 'th'].includes(slot![0]?.tag!)\n}\n\nexport default Vue.extend({\n  name: 'row',\n\n  functional: true,\n\n  props: {\n    headers: Array as PropType<DataTableHeader[]>,\n    index: Number,\n    item: Object,\n    rtl: Boolean,\n  },\n\n  render (h, { props, slots, data }): VNode {\n    const computedSlots = slots()\n\n    const columns = props.headers.map((header: DataTableHeader) => {\n      const children = []\n      const value = getObjectValueByPath(props.item, header.value)\n\n      const slotName = header.value\n      const scopedSlot = data.scopedSlots && data.scopedSlots.hasOwnProperty(slotName) && data.scopedSlots[slotName]\n      const regularSlot = computedSlots.hasOwnProperty(slotName) && computedSlots[slotName]\n\n      if (scopedSlot) {\n        children.push(...wrapInArray(scopedSlot({\n          item: props.item,\n          isMobile: false,\n          header,\n          index: props.index,\n          value,\n        })))\n      } else if (regularSlot) {\n        children.push(...wrapInArray(regularSlot))\n      } else {\n        children.push(value == null ? value : String(value))\n      }\n\n      const textAlign = `text-${header.align || 'start'}`\n\n      return needsTd(children)\n        ? h('td', {\n          class: [\n            textAlign,\n            header.cellClass,\n            {\n              'v-data-table__divider': header.divider,\n            },\n          ],\n        }, children)\n        : children\n    })\n\n    return h('tr', data, columns)\n  },\n})\n"]},"metadata":{},"sourceType":"module"}